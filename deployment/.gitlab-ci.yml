stages:
- build
- deploy_to_lower
- deploy_to_production

build:
    stage: build
    before_script:
    # - bash deployment/ember-packaging.sh PopulateConfigFile ".env-candidate"
    - bash deployment/ember-packaging.sh PopulateConfigFile ".env-staging"
    - if [ $CI_COMMIT_BRANCH == 'master' ]; then bash deployment/ember-packaging.sh PopulateConfigFile ".env-production"; fi
    script:
    - nvm install $NodeVersion
    - nvm use $NodeVersion
    - yarn install --cwd $SvcName --frozen-lockfile
    - cd $SvcName
    - DEPLOY_TYPE=staging ember build --environment=production --output-path=../dist/staging
    # - DEPLOY_TYPE=candidate ember build --environment=production --output-path=../dist/candidate
    - if [ $CI_COMMIT_BRANCH == 'master' ]; then DEPLOY_TYPE=production ember build --environment=production --output-path=../dist/production; fi
    - cd ..
    #Create Environment-bound packages
    # - bash deployment/ember-packaging.sh CreatePackage "candidate" $CI_PIPELINE_ID
    - bash deployment/ember-packaging.sh CreatePackage "staging" $CI_PIPELINE_ID
    - if [ $CI_COMMIT_BRANCH == 'master' ]; then bash deployment/ember-packaging.sh CreatePackage "production" $CI_PIPELINE_ID; fi
    artifacts:
        name: "artifact-ci-build-$SvcName-$CI_PIPELINE_ID"
        paths:
        - $SvcName-$CI_PIPELINE_ID-staging
        # - $SvcName-$CI_PIPELINE_ID-candidate
        - $SvcName-$CI_PIPELINE_ID-production
        - dist-$CI_PIPELINE_ID-staging
        # - dist-$CI_PIPELINE_ID-candidate
        - dist-$CI_PIPELINE_ID-production
    only:
        - /^release\/[0-9]+-[0-9a-zA-Z-]+$/
        - /^release\/[0-9]$/
        - /^feature\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - /^story\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - /^bug\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - master

ondemand:
    stage: build
    when: manual
    environment:
        name: ondemand-$CI_COMMIT_BRANCH
        on_stop: ondemand-teardown
        url: $GatewayUrl
    before_script:
    # Get stage from branchname, look for an existing Api Gateway route
    - export AwsStage=$(bash deployment/utilities.sh GetStageFromBranchName $CI_COMMIT_BRANCH)
    - bash deployment/utilities.sh SetAwsProfile
    - GatewayUrl=$(bash deployment/utilities.sh GetGatewayUrl "fastboot")
    - echo "GatewayUrl=https://$GatewayUrl" >> post-deploy.env
    # Set calculated env variables from generated Api Gateway
    - cp .env-candidate .env-$AwsStage
    - export AwsBucket=$SvcName-fastboot-$AwsStage
    - export Domain_Dev=$(bash deployment/utilities.sh TrimUrlToDomain $GatewayUrl)/$AwsStage
    - bash deployment/ember-packaging.sh PopulateConfigFile ".env-$AwsStage"
    script:
    - nvm install $NodeVersion
    - nvm use $NodeVersion
    - yarn install --cwd $SvcName --frozen-lockfile
    - cd $SvcName
    - DEPLOY_TYPE=$AwsStage ember build --environment=production --output-path=../dist/$AwsStage
    - cd ..
    - bash deployment/ember-packaging.sh CreatePackage $AwsStage $CI_PIPELINE_ID
    - bash deployment/utilities.sh SetAwsProfile
    - bash deployment/utilities.sh CreatePublicBucket $AwsBucket
    - bash deployment/utilities.sh DeleteBucketFolder $AwsBucket/assets
    - bash deployment/utilities.sh CopyToBucket dist-$CI_PIPELINE_ID-$AwsStage $AwsBucket
    - cd $SvcName-$CI_PIPELINE_ID-$AwsStage
    - bash ../deployment/utilities.sh SetServerlessProfile
    - sls deploy --stage $AwsStage
    variables:
        UseCustomGatewayUrl: "false"
    artifacts:
        reports:
            dotenv: post-deploy.env
    only:
        - /^release\/[0-9]+-[0-9a-zA-Z-]+$/
        - /^release\/[0-9]$/
        - /^feature\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - /^story\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - /^bug\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - master

ondemand-teardown:
    stage: build
    when: manual
    environment:
        name: ondemand-$CI_COMMIT_BRANCH
        action: stop
    before_script:
    - export AwsStage=$(bash deployment/utilities.sh GetStageFromBranchName $CI_COMMIT_BRANCH)
    - export AwsBucket=$SvcName-fastboot-$AwsStage
    script:
    - cd $SvcName-$CI_PIPELINE_ID-$AwsStage
    - bash ../deployment/utilities.sh SetServerlessProfile
    - sls remove --stage $AwsStage
    - bash ../deployment/utilities.sh SetAwsProfile
    - bash deployment/utilities.sh DeleteBucketFolder $AwsBucket
    variables:
        GIT_STRATEGY: none
        UseCustomGatewayUrl: "false"
        Domain: ""
    only:
        - /^release\/[0-9]+-[0-9a-zA-Z-]+$/
        - /^release\/[0-9]$/
        - /^feature\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - /^story\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - /^bug\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - master

# candidate:
#     stage: deploy_to_lower
#     when: manual
#     environment:
#         name: candidate
#         url: "https://$Domain_Cand"
#     script:
#     #Setup S3 bucket for dist
#     - bash deployment/utilities.sh SetAwsProfile
#     - bash deployment/utilities.sh CreatePublicBucket $SvcName-fastboot-$AwsStage
#     - bash deployment/utilities.sh DeleteBucketFolder $SvcName-fastboot-$AwsStage/assets
#     - bash deployment/utilities.sh CopyToBucket dist-$CI_PIPELINE_ID-candidate $SvcName-fastboot-$AwsStage
#     #Setup serverless deploy
#     - cd $SvcName-$CI_PIPELINE_ID-candidate
#     - bash ../deployment/utilities.sh SetServerlessProfile
#     - sls deploy --stage $AwsStage
#     variables:
#         AwsStage: "candidate"
#         Domain: $Domain_Cand
#         AwsBucket: $AssetsDomain_Cand
#         UseCustomGatewayUrl: "true"
#     artifacts:
#         name: "artifact-candidate-$SvcName-$CI_PIPELINE_ID"
#         paths:
#         - $SvcName-$CI_PIPELINE_ID-candidate
#         - $SvcName-$CI_PIPELINE_ID-production
#         - dist-$CI_PIPELINE_ID-candidate
#         - dist-$CI_PIPELINE_ID-production
#     only:
#         - /^release\/[0-9]+-[0-9a-zA-Z-]+$/
#         - /^release\/[0-9]$/
#         - /^feature\/tp[0-9]+-[0-9a-zA-Z-]+$/
#         - /^story\/tp[0-9]+-[0-9a-zA-Z-]+$/
#         - /^bug\/tp[0-9]+-[0-9a-zA-Z-]+$/
#         - master

staging:
    stage: deploy_to_lower
    when: manual
    environment:
        name: staging
        url: "https://$Domain_Staging"
    script:
    #Setup S3 bucket for dist
    - bash deployment/utilities.sh SetAwsProfile
    - bash deployment/utilities.sh CreatePublicBucket $SvcName-fastboot-$AwsStage
    - bash deployment/utilities.sh DeleteBucketFolder $SvcName-fastboot-$AwsStage/assets
    - bash deployment/utilities.sh CopyToBucket dist-$CI_PIPELINE_ID-staging $SvcName-fastboot-$AwsStage
    #Setup serverless deploy
    - cd $SvcName-$CI_PIPELINE_ID-staging
    - bash ../deployment/utilities.sh SetServerlessProfile
    - sls deploy --stage $AwsStage
    variables:
        AwsStage: "staging"
        Domain: $Domain_Staging
        AwsBucket: $AssetsDomain_Staging
        UseCustomGatewayUrl: "true"
    artifacts:
        name: "artifact-staging-$SvcName-$CI_PIPELINE_ID"
        paths:
        - $SvcName-$CI_PIPELINE_ID-staging
        - $SvcName-$CI_PIPELINE_ID-production
        - dist-$CI_PIPELINE_ID-staging
        - dist-$CI_PIPELINE_ID-production
    only:
        - /^release\/[0-9]+-[0-9a-zA-Z-]+$/
        - /^release\/[0-9]$/
        - /^feature\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - /^story\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - /^bug\/tp[0-9]+-[0-9a-zA-Z-]+$/
        - master

production:
    stage: deploy_to_production
    when: manual
    environment:
        name: production
        url: "https://$Domain_Prod"
    script:
    #Setup S3 bucket for dist
    - bash deployment/utilities.sh SetAwsProfile
    - bash deployment/utilities.sh CreatePublicBucket $SvcName-fastboot-$AwsStage
    - bash deployment/utilities.sh DeleteBucketFolder $SvcName-fastboot-$AwsStage/assets
    - bash deployment/utilities.sh CopyToBucket dist-$CI_PIPELINE_ID-production $SvcName-fastboot-$AwsStage
    #Setup serverless deploy
    - cd $SvcName-$CI_PIPELINE_ID-production
    - bash ../deployment/utilities.sh SetServerlessProfile
    - sls deploy --stage $AwsStage
    variables:
        AwsStage: "production"
        Domain: $Domain_Prod
        AwsBucket: $AssetsDomain_Prod
        UseCustomGatewayUrl: "true"
    artifacts:
        name: "artifact-production-$SvcName-$CI_PIPELINE_ID"
        paths:
        - $SvcName-$CI_PIPELINE_ID-production
        - dist-$CI_PIPELINE_ID-production
    only:
        - master